name: PR

on:
  pull_request:
    types: [opened, reopened, synchronize]

env:
  CARGO_TERM_COLOR: always
  DOCKER_BUILDKIT: "1"

jobs:
  build_devcontainer:
    name: Verify that the devcontainer image builds
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Build devcontainer
        run: |
          docker version
          cd .devcontainer
          docker image build --pull --platform=linux/amd64 --tag=gitprompt:latest - < Dockerfile

  build_linux:
    name: Verify that gitprompt builds on various linux targets
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
          - riscv64gc-unknown-linux-gnu
          # - riscv64gc-unknown-linux-musl  # TODO: uncomment when rust stdlib is available for riscv-musl
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
      - name: Install ARM64 gcc backend if necessary
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends gcc-aarch64-linux-gnu
      - name: Install musl if necesary
        if: endsWith(matrix.target, '-musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends musl-tools
      - name: Build Linux release binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
          use-cross: ${{ ! startsWith(matrix.target, 'x86_64-') }}

  build_mac:
    name: Verify gitprompt builds on macOS
    runs-on: macos-latest
    strategy:
      matrix:
        target:
          - aarch64-apple-darwin
          - x86_64-apple-darwin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
      - name: Build macOS release binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

  lint:
    name: Run clippy and verify code is formatted
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy, rustfmt
      - name: Lint
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --check
